# automations to adjust Guest device tracker, used by Guest person
# when binary sensor is changed.
- id: "1616560803743"
  alias: Guest_DT_Home
  description: Switch Guest Device Tracker to home when guests are on Wifi
  trigger:
    - platform: state
      entity_id: binary_sensor.wifi_guests
      to: "on"
      from: "off"
  condition: []
  action:
    - service: device_tracker.see
      data:
        dev_id: guest
        location_name: home
  mode: single
- id: "1616560899377"
  alias: Guest_DT_Not_Home
  description: Set Guest device tracker to Not Home when Guest not detected on Wifi
  trigger:
    - platform: state
      entity_id: binary_sensor.wifi_guests
      from: "on"
      for: 00:05:00
      to: "off"
  condition: []
  action:
    - service: device_tracker.see
      data:
        dev_id: guest
        location_name: not_home
  mode: single

# create a device tracker based upon my iPhone device tracker (using Home Assistant
# companion app) which filters updates to exclude GPS updates that are below a certain
# accuracy.
- id: MirrorPhoneDeviceTracker
  alias: Mirror Phone Device Tracker
  description: Mirror phone device tracker, filtering out updates below accuracy threshold
  trigger:
    - platform: state
      entity_id: device_tracker.axel_larsson_s_iphone
  condition:
    # filter out updates where GPS accuracy is greater then 100 meters
    - condition: numeric_state
      entity_id: device_tracker.axel_larsson_s_iphone
      attribute: gps_accuracy
      below: 100
  action:
    # mirror state to virtual device tracker
    - service: device_tracker.see
      data:
        dev_id: "axel_phone_filtered"
        location_name: "{{ states('device_tracker.axel_larsson_s_iphone') }}"
        gps: >-
          [{{ state_attr('device_tracker.axel_larsson_s_iphone', 'latitude') }},
          {{ state_attr('device_tracker.axel_larsson_s_iphone', 'longitude') }}]
        gps_accuracy: >-
          {{ state_attr('device_tracker.axel_larsson_s_iphone', 'gps_accuracy') }}
        battery: >-
          {{ state_attr('device_tracker.axel_larsson_s_iphone', 'battery_level')}}

# adjust presence indicator based upon status of Person entities.
- id: PresenceChanging
  alias: Presence_Changing
  description: Trigger when presence is changing
  trigger:
    - platform: state
      entity_id:
        - person.guest
        - person.axel_larsson
        - person.sophie
      to:
        - home
        - not_home
  condition:
    - condition: state
      entity_id: input_boolean.hold_presence
      state: "off"
  action:
    - choose:
        - alias: If Guest is home, set to With Guests
          conditions:
            - condition: state
              entity_id: person.guest
              state: home
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.presence
                option: With Guests
        - alias: If Axel is home set to Home
          conditions:
            - condition: state
              entity_id: person.axel_larsson
              state: home
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.presence
                option: Home
        - alias: If only Sophie is home set to Dog Alone
          conditions:
            - condition: state
              entity_id: person.sophie
              state: home
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.presence
                option: Dog Alone
      # if no one is home, set to Away
      default:
        - service: input_select.select_option
          data:
            entity_id: input_select.presence
            option: Away

# uodate out of area timestamp if more than 150 km from home
# used by other automations to deetermine if recently away
- id: UpdateOutOfArea
  alias: "Location Update Out of Area Indicator"
  trigger:
    - platform: time_pattern
      minutes: /15
  condition:
    - condition: state
      entity_id: person.axel_larsson
      state: not_home
    - condition: template
      value_template: >
        {{ distance( states.person.axel_larsson )|round( 1, "floor", 0 ) > 150 }}
  action:
    - service: input_datetime.set_datetime
      data:
        entity_id: input_datetime.location_last_out_of_area
        timestamp: "{{ now().timestamp() }}"

# trigger away mode if alarm is armed
- id: AwayOnAlarmArm
  alias: "Set Away when Alarm is armed"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.178_coles_st_alarm_control_panel_alarm_control_panel
      to: "armed_away"
  condition:
    # add condition check to prevent race conditions when disarming.
    # SS will sometimes revert back to Armed Aay if there is a delay when disarming.
    # must have been home for at least 5 minutes.
    - condition: state
      entity_id: input_select.presence
      state:
        - "Home"
        - "With Guests"
      for: "00:05:00"
  action:
    - service: script.going_out

# turn off TVs, warmers, and lights when leaving.
- id: TurnOffWhenLeaving
  alias: Turn_Off_When_Leaving
  description: Turn devices off when leaving
  trigger:
    - platform: state
      entity_id: input_select.presence
      to: Away
      for: 00:00:45
  action:
    - service: light.turn_off
      continue_on_error: true
      entity_id:
        - light.den_lights
        - light.vestibule_switch
        - light.under_stoop_lights
        - light.living_room
        - light.laundry_room
        - light.office
        - light.guest_room
        - light.master_bedroom
        - light.kitchen
    - service: switch.turn_off
      continue_on_error: true
      entity_id:
        - switch.guest_bath_towel_warmer
        - switch.master_bath_towel_warmer
    - service: remote.turn_off
      continue_on_error: true
      entity_id: remote.living_room_2
    - service: remote.turn_off
      continue_on_error: true
      entity_id: remote.den

# turn off a subset of devices if the dog is alone
- id: TurnOffWhenLeavingDog
  alias: Turn_Off_When_Leaving_Dog
  description: Turn devices off when leaving dog alone
  trigger:
    - platform: state
      entity_id: input_select.presence
      to: Dog Alone
      for: 00:00:45
  action:
    - service: light.turn_off
      continue_on_error: true
      entity_id:
        - light.vestibule_switch
        - light.under_stoop_lights
        - light.laundry_room
        - light.guest_room
        - light.master_bedroom
    - service: switch.turn_off
      continue_on_error: true
      entity_id:
        - switch.guest_bath_towel_warmer
        - switch.master_bath_towel_warmer

# Arm alarm 10 minutes after leaving
- id: ArmWhenLeaving
  alias: Arm Alarm when Leaving
  description: Arm Alarm when Leaving
  trigger:
    - platform: state
      entity_id: input_select.presence
      to:
        - Away
        - Dog Alone
      for: 00:10:00
  action:
    - service: script.alarm_arm_away

# disarm alarm when arriving
- id: DisarmWhenArriving
  alias: Disarm Alarm when Arriving
  description: Disarm Alarm when Arriving
  trigger:
    - platform: state
      entity_id: input_select.presence
      from:
        - Away
        - Dog Alone
      to:
        - Home
        - With Guests
  action:
    - service: script.alarm_disarm

# turn lights on when arriving, if its after sunset.
- id: TurnLight123
  alias: Turn_Light_On_Arriving
  description: Turn lights on in the evening
  trigger:
    - platform: state
      entity_id: input_select.presence
      from:
        - Away
        - Dog Alone
      to:
        - Home
        - With Guests
  condition:
    - condition: state
      entity_id: sun.sun
      state: below_horizon
  action:
    - service: scene.turn_on
      target:
        entity_id: scene.common_area_normal_lighting

# Guest overnight automations
# Set up guest room for overnight stay
- id: GuestOvernight
  alias: Guest Overnight Actions
  description: Prepare guest room for overnight stays
  trigger:
    - platform: state
      entity_id: input_boolean.guests_overnight
  mode: restart
  action:
    - if:
        condition: template
        value_template: "{{ trigger.to_state.state == 'on' }}"
      # prepare guest room for overnight
      then:
        # disable motion sensors
        - service: switch.turn_off
          continue_on_error: true
          entity_id:
            - switch.laundry_room_motion
            - switch.guest_room_motion
        # enable climate schedule
        - service: switch.turn_on
          entity_id: switch.schedule_guest_room_hvac_presets
        # enable HVAC in Guest Room
        - service: script.hvac_enable_mode
          data:
            zone: "guest_room"
            mode: "{{ states('input_select.hvac_climate_mode') | lower }}"
      # reset guest room
      else:
        # enable motion sensors
        - service: switch.turn_on
          continue_on_error: true
          entity_id:
            - switch.laundry_room_motion
            - switch.guest_room_motion
        # turn off lights
        - service: light.turn_off
          continue_on_error: true
          entity_id:
            - light.guest_room
            - light.laundry_room
        # turn off towel warmer
        - service: switch.turn_off
          continue_on_error: true
          entity_id:
            - switch.guest_bath_towel_warmer
        # disable climate schedule
        - service: switch.turn_off
          entity_id: switch.schedule_guest_room_hvac_presets
        # turn off HVAC
        - service: script.hvac_enable_mode
          data:
            zone: "guest_room"
            mode: "off"
        # set schedule preset to daytime
        - service: input_select.select_option
          data:
            entity_id: input_select.hvac_controller_guest_room_preset
            option: Day

# TV watching motion sensor control
- id: "1617150949677"
  alias: Living Room TV motion sensor off
  description: Turn off living room motion sensor when watching TV
  trigger:
    - platform: state
      entity_id: remote.living_room_2
      from: "off"
      to: "on"
  action:
    - service: switch.turn_off
      target:
        entity_id: switch.living_room_motion
  mode: single

- id: "1617150949699"
  alias: Living Room TV motion sensor on
  description: Turn on living room motion sensor when finished watching TV
  trigger:
    - platform: state
      entity_id: remote.living_room_2
      from: "on"
      to: "off"
  action:
    - service: switch.turn_on
      target:
        entity_id: switch.living_room_motion
  mode: single

# TV watching motion sensor control
- id: "1617150949677a"
  alias: Den TV motion sensor off
  description: Turn off living room motion sensor when watching TV
  trigger:
    - platform: state
      entity_id: remote.den
      from: "off"
      to: "on"
  action:
    - service: switch.turn_off
      target:
        entity_id: switch.office_motion
  mode: single

- id: "1617150949699b"
  alias: Den TV motion sensor on
  description: Turn on living room motion sensor when finished watching TV
  trigger:
    - platform: state
      entity_id: remote.den
      from: "on"
      to: "off"
  action:
    - service: switch.turn_on
      target:
        entity_id: switch.office_motion
  mode: single

# smart wake up trigers.
# fallback trigger based upon Alexa Media Player reading alarm time
- id: SmartWakeUpMasterBedroomAltTrigger
  alias: Smart Wake Up Master Bedroom Alternate trigger
  trigger:
    - minutes: /5
      platform: time_pattern
  condition:
    - condition: template
      value_template: "{{ states('sensor.bedroom_echo_show_next_alarm') != 'unknown' and as_timestamp(states('sensor.bedroom_echo_show_next_alarm')) - as_timestamp(now()) <= 3540 and as_timestamp(states('sensor.bedroom_echo_show_next_alarm')) - as_timestamp(now()) > 0 }}"
    - condition: state
      entity_id: light.virtual_wake_up_master_bedroom
      state: "off"
  action:
    - service: light.turn_on
      entity_id: light.virtual_wake_up_master_bedroom

# master bedroom Alexa alarm trigger via smart wake-up lighting
- id: SmartWakeUpMasterBedroom
  alias: Smart Wake Up Master Bedroom
  trigger:
    - platform: state
      entity_id: light.virtual_wake_up_master_bedroom
      to: "on"
  condition:
    - condition: time
      after: "02:00:00"
      before: "11:00:00"
    - condition: template
      value_template: "{{ state_attr('automation.smart_wake_up_master_bedroom', 'last_triggered').day != utcnow().day }}"
  action:
    # execute bathroom heater script and do not wait for completion
    - service: script.turn_on
      target:
        entity_id: script.wake_up_bath_heater
    # trigger wake-up script and wait for it to complete
    - service: script.wake_up
      data:
        warmer: master_bath_towel_warmer
        hvac: master_bedroom
    # turn off virtual light for triggering
    - service: light.turn_off
      entity_id: light.virtual_wake_up_master_bedroom

# fallback trigger based upon Alexa Media Player reading alarm time
- id: SmartWakeUpGuestRoomAltTrigger
  alias: Smart Wake Up Guest Room Alternate trigger
  trigger:
    - minutes: /5
      platform: time_pattern
  condition:
    - condition: template
      value_template: "{{ states('sensor.guest_room_spot_next_alarm') != 'unknown' and as_timestamp(states('sensor.guest_room_spot_next_alarm')) - as_timestamp(now()) <= 3540 and as_timestamp(states('sensor.guest_room_spot_next_alarm')) - as_timestamp(now()) > 0 }}"
    - condition: state
      entity_id: light.virtual_wake_up_guest_room
      state: "off"
  action:
    - service: light.turn_on
      entity_id: light.virtual_wake_up_guest_room

# guest room alexa alarm trigger via smart wake-up lighting
- id: SmartWakeUpGuestRoom
  alias: Smart Wake Up Guest Room
  trigger:
    - platform: state
      entity_id: light.virtual_wake_up_guest_room
      to: "on"
  condition:
    - condition: time
      after: "02:00:00"
      before: "11:00:00"
    - condition: template
      value_template: "{{ state_attr('automation.smart_wake_up_guest_room','last_triggered').day != utcnow().day }}"
  action:
    - service: script.wake_up
      data:
        warmer: guest_bath_towel_warmer
        hvac: guest_room
    # turn off virtual light for triggering
    - service: light.turn_off
      entity_id: light.virtual_wake_up_guest_room

# New HVAC Controller automations
- id: HVACWindows
  alias: HVAC Controller Windows Automation
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.hvac_windows_den
        - binary_sensor.hvac_windows_living_room
        - binary_sensor.hvac_windows_master_bedroom
      to:
        - "on"
        - "off"
      for: "00:05:00"
  mode: parallel
  action:
    - variables:
        # figure out what zone triggered us
        zone: >
          {{ trigger.entity_id|regex_replace( find='binary_sensor.hvac_windows_(.+)$', replace='\\1' ) }}
        # Window open or closed
        window_status: "{{ trigger.to_state.state }}"
    - if:
        condition: template
        value_template: "{{ window_status == 'on' }}"
      then:
        # set unit to off
        - service: script.hvac_enable_mode
          data:
            zone: "{{ zone }}"
            mode: "off"
      else:
        # get house mode
        - variables:
            mode: "{{ states('input_select.hvac_climate_mode' ) | lower }}"
        # continue if mode is not 'off'
        - condition: "{{ mode != 'off' }}"
        # set mode and current temp to house mode
        - service: script.hvac_enable_mode
          data:
            zone: "{{ zone }}"
            mode: "{{ mode }}"

# Deal with House mode or preset mode changes
- id: HVACPresetChange
  alias: HVAC Controller Preset Change
  trigger:
    - platform: state
      entity_id:
        - input_select.hvac_controller_house_mode
        - input_select.hvac_controller_common_area_preset
        - input_select.hvac_controller_master_bedroom_preset
        - input_select.hvac_controller_guest_room_preset
  mode: parallel
  action:
    # Set some vars to figure out what changed
    - variables:
        house_mode: "{{ trigger.entity_id == 'input_select.hvac_controller_house_mode' }}"
        common_area: "{{ trigger.entity_id == 'input_select.hvac_controller_common_area_preset' }}"
        master_bedroom: "{{ trigger.entity_id == 'input_select.hvac_controller_master_bedroom_preset' }}"
        guest_room: "{{ trigger.entity_id == 'input_select.hvac_controller_guest_room_preset' }}"
    # only continue if the house mode is changed or we are currently home
    # automation should not fire if preset selector is changing while we are away
    - condition: "{{ house_mode or is_state('input_select.hvac_controller_house_mode', 'Home') }}"
    # stop other scripts trying to make changes if house mode is being changed
    - if:
        condition: template
        value_template: "{{ house_mode }}"
      then:
        - service: script.turn_off
          target:
            entity_id:
              - script.hvac_enable_preset
    # decide what zones to change based upon trigger
    - if:
        condition: template
        value_template: "{{ house_mode or common_area }}"
      then:
        - repeat:
            for_each:
              - living_room
              - den
              - den_baseboard
              - den_heater
              - living_room_heater
            sequence:
              - service: script.turn_on
                target:
                  entity_id: script.hvac_enable_current
                data:
                  variables:
                    zone: "{{ repeat.item }}"
    - if:
        condition: template
        value_template: "{{ house_mode or master_bedroom }}"
      then:
        - repeat:
            for_each:
              - master_bedroom
              - master_bedroom_heater
            sequence:
              - service: script.turn_on
                target:
                  entity_id: script.hvac_enable_current
                data:
                  variables:
                    zone: "{{ repeat.item }}"
    - if:
        condition: template
        value_template: "{{ house_mode or guest_room }}"
      then:
        - service: script.turn_on
          target:
            entity_id: script.hvac_enable_current
          data:
            variables:
              zone: "guest_room"

# air purifier house mode changes
- id: PurifierHomeAwayMode
  alias: Air Purifier Home or Away Mode
  description: Turn on or off air purifiers based upon home/away status
  trigger:
    - platform: state
      entity_id: input_select.hvac_controller_house_mode
      to:
        - Home
        - ExtAway
  action:
    - repeat:
        for_each:
          - living_room
          - den
          - master_bedroom
          - guest_room
        sequence:
          - if:
              condition: state
              entity_id: input_select.hvac_controller_house_mode
              state: Home
            then:
              - service: fan.turn_on
                continue_on_error: true
                data:
                  entity_id: "fan.{{ repeat.item }}_purifier"
              - service: fan.set_preset_mode
                continue_on_error: true
                data:
                  entity_id: "fan.{{ repeat.item }}_purifier"
                  preset_mode: auto
            else:
              - service: fan.turn_off
                continue_on_error: true
                data:
                  entity_id: "fan.{{ repeat.item }}_purifier"

# humidifier automations
- id: HumidifierMode
  alias: Humidifier Mode Automation
  description: Automatically turn on and off humidifiers based upon HVAC mode and presence
  trigger:
    - platform: state
      entity_id: input_select.hvac_controller_house_mode
      to:
        - Home
        - ExtAway
    - platform: state
      entity_id: input_select.hvac_climate_mode
  action:
    - repeat:
        for_each:
          - den
          - master_bedroom
        sequence:
          - if:
              - condition: state
                entity_id: input_select.hvac_climate_mode
                state: Heat
              - condition: state
                entity_id: input_select.hvac_controller_house_mode
                state:
                  - Home
                  - Away
            then:
              - service: humidifier.turn_on
                continue_on_error: true
                data:
                  entity_id: "humidifier.{{ repeat.item }}_humidifier"
            else:
              - service: humidifier.turn_off
                continue_on_error: true
                data:
                  entity_id: "humidifier.{{ repeat.item }}_humidifier"

# Set HVAC away 30 minutes after leaving
- id: HVACAway
  alias: HVAC Controller Set Away
  description: Set HVAC Controller to Away mode
  trigger:
    - platform: state
      entity_id: input_select.presence
      to:
        - Away
        - Dog Alone
      for: 00:30:00
  condition:
    - condition: state
      entity_id: input_select.hvac_controller_house_mode
      state: Home
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.hvac_controller_house_mode
        option: Away

# Set HVAC ExtAway 6 hours after leaving
- id: HVACExtAway
  alias: HVAC Controller Set ExtAway
  description: Set HVAC Controller to ExtAway mode
  trigger:
    - platform: state
      entity_id: input_select.presence
      to:
        - Away
      for: 06:00:00
  condition:
    - condition: state
      entity_id: input_select.hvac_controller_house_mode
      state: Away
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.hvac_controller_house_mode
        option: ExtAway

# Set HVAC mode home
- id: HVACHome
  alias: HVAC Controller Set Home
  description: Set HVAC Controller to Home mode
  trigger:
    - platform: state
      entity_id: input_select.presence
      to:
        - Home
        - With Guests
      from:
        - Away
        - Dog Alone
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.hvac_controller_house_mode
        option: Home

# HVAC Controller Auto-changerover automations
# Main unit changeover
- id: HVACAutoChangeover
  alias: "HVAC Auto Changeover"
  description: "HVAC Auto Changeover"
  trigger:
    # trigger when weather is above or below configured thresholds
    # set mode variable for heat or cool depending on temp is above or below
    - platform: numeric_state
      entity_id: sensor.o_1pst_temperature
      below: input_number.hvac_changeover_heat
      variables:
        mode: "Heat"
    - platform: numeric_state
      entity_id: sensor.o_1pst_temperature
      above: input_number.hvac_changeover_cool
      variables:
        mode: "Cool"
    # set mode for off if we cross into the band of optimal outdoor temps
    # where HVAC is not needed.
    #
    # now uses stats helpers to do lookback of 8 hours without an arbitrary delay
    # survives HA restarts
    - platform: numeric_state
      entity_id: sensor.outdoor_temperature_max
      below: input_number.hvac_changeover_off_high
      variables:
        mode: "Off"
    - platform: numeric_state
      entity_id: sensor.outdoor_temperature_min
      above: input_number.hvac_changeover_off_low
      variables:
        mode: "Off"
  condition:
    and:
      # don't do this if we are going from an unavailable state
      - "{{ trigger.from_state and trigger.from_state.state != 'unavailable' }}"
      # and we are setting mode to either heat or cool or if we are setting mode to off,
      # we have not crossed into the auto-changerover threshold for heat/cool.
      - or:
          - "{{ mode in ('Heat, Cool')}}"
          - and:
              - "{{ mode in ('Off') }}"
              - condition: numeric_state
                entity_id: sensor.o_1pst_temperature
                above: input_number.hvac_changeover_heat
                below: input_number.hvac_changeover_cool
  action:
    # set house mode
    - service: input_select.select_option
      data:
        entity_id: input_select.hvac_climate_mode
        option: "{{ mode }}"

# House-wide climate mode changing
- id: HVACHouseClimateModeChanging
  alias: "HVAC House Climate Mode Changing"
  description: "HVAC House Climate Mode Changing"
  trigger:
    - platform: state
      entity_id: input_select.hvac_climate_mode
  mode: restart
  action:
    # get new mode
    - variables:
        mode: "{{ states('input_select.hvac_climate_mode') | lower }}"
    # stop all mode or setpoint changes in flight.
    - service: script.turn_off
      target:
        entity_id:
          - script.hvac_enable_mode
          - script.hvac_enable_preset
    # repeat for each zone
    - repeat:
        for_each:
          - "den"
          - "living_room"
          - "master_bedroom"
        sequence:
          # only if windows for that zone are closed
          - condition: >
              {{ not is_state('binary_sensor.hvac_windows_' + repeat.item, 'on') }}
          # set mode and target temp based on preset
          - service: script.turn_on
            target:
              entity_id: script.hvac_enable_mode
            data:
              variables:
                zone: "{{ repeat.item }}"
                mode: "{{ mode }}"
    # guest room - only do if guest room is currently on and changing to heat or cool
    - condition: "{{ mode in ('heat', 'cool') }}"
    # wait for unavaialble unit to become available up to 5 minutes
    - wait_template: "{{ states('climate.guest_room') not in ('unavailable', 'unknown') }}"
      timeout: "00:05:00"
    # only continue if unit became available and continue if current unit state is not off
    - condition: "{{ wait.completed and ( not is_state('climate.guest_room', 'off') ) }}"
    # set guest room
    - service: script.hvac_enable_mode
      data:
        zone: "guest_room"
        mode: "{{ mode }}"

# Supplemental heat
- id: HVACSupplementalHeat
  alias: "HVAC Supplemental Heat"
  description: "HVAC Supplemental Heat"
  trigger:
    # trigger when weather is above or below configured thresholds
    # set mode variable for heat or off depending on temp is above or below
    - platform: numeric_state
      entity_id: sensor.o_1pst_temperature
      below: input_number.hvac_changeover_supplemental_heat_on
      for: "00:10:00"
      variables:
        mode: "heat"
    - platform: numeric_state
      entity_id: sensor.o_1pst_temperature
      above: input_number.hvac_changeover_supplemental_heat_off
      for: "00:10:00"
      variables:
        mode: "off"
  # don't do this if we are going from an unavailable state
  condition: "{{ trigger.from_state and trigger.from_state.state != 'unavailable'  }}"
  action:
    # repeat for each zone
    - repeat:
        for_each:
          - "den_baseboard"
          - "den_heater"
          - "living_room_heater"
          - "master_bedroom_heater"
        sequence:
          # set mode and target temp based on preset
          - service: script.turn_on
            target:
              entity_id: script.hvac_enable_mode
            data:
              variables:
                zone: "{{ repeat.item }}"
                mode: "{{ mode }}"

# Supplemental heat -- temp reset
# The Rio Arc heaters tend to spontaneously set their temp to a value not exposed via HomeKit.
# I think this is a leftovers from schedules in the Rio Heating app whichhas been discontinued
# and thus these schedules can't be cleared. They can also turn on by themselves.
#
# This is a hack to simply read back the current setpoint and reset it to that value every 30 minutes
# or turn off again if it should currently be off.
- id: UpdateRioArcSetpoint
  alias: "HVAC Supplemental Heat Reset"
  trigger:
    - platform: time_pattern
      minutes: /30
  action:
    - repeat:
        for_each:
          - "den_heater"
          - "living_room_heater"
          - "master_bedroom_heater"
        sequence:
          - variables:
              unit: "climate.{{ repeat.item }}"
          # reset temp if in heating mode, else turn off
          - if:
              - "{{ is_state( unit, 'heat' ) }}"
            then:
              - service: climate.set_temperature
                continue_on_error: true
                data:
                  entity_id: "{{ unit }}"
                  temperature: "{{ state_attr( unit, 'temperature' ) }}"
            else:
              - service: climate.turn_off
                continue_on_error: true
                data:
                  entity_id: "{{ unit }}"

# HVAC Controller anticipation automations. Prepare for return home based
# on certain triggers.

# Update change timestamp on house mode change.
# Used by anticipation automation to check how long house mode has been set.
- id: HVACHouseModeTimestamp
  alias: HVAC Controller House Mode Timestamp
  trigger:
    - platform: state
      entity_id: input_select.hvac_controller_house_mode
  action:
    - service: input_datetime.set_datetime
      data:
        entity_id: input_datetime.hvac_controller_house_mode_last_set
        timestamp: "{{ now().timestamp() }}"

# Prepare for return home if at family house on Sunday night
- id: PrepareHVACReturnSunday
  alias: HVAC Controller Prepare Return Sunday
  description: Prepare for return home on Sundays
  mode: single
  max_exceeded: silent
  trigger:
    - platform: time_pattern
      minutes: "/10"
  condition:
    # only on a Sunday between after 17:00 hours
    - condition: time
      after: "17:00:00"
      weekday:
        - sun
    # only if I'm at the Family House
    - condition: state
      entity_id: person.axel_larsson
      state: "Family House"
  action:
    # run the script
    - service: script.hvac_prepare_return_from_extaway

# Prepare for return home if I'm returning from a trip and have landed at a
# local airport.
- id: PrepareHVACReturnAirport
  alias: "HVAC Controller Prepare Return Airport"
  description: Prepare for return home from a business trip
  mode: single
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: person.axel_larsson
      to:
        - EWR
        - JFK
        - LGA
      for: "00:20:00"
  condition:
    # only if out of area in the last 10 hours
    # prevents from firing when departing
    - condition: template
      value_template: >
        {{ as_timestamp(now()) - as_timestamp(states('input_datetime.location_last_out_of_area')) < 36000 }}
  action:
    # run the script
    - service: script.hvac_prepare_return_from_extaway

# prepare for return home on a workday
- id: PrepareHVACReturnWorkday
  alias: "HVAC Controller Prepare Return Workday"
  description: Prepare for return home on a workday
  mode: single
  max_exceeded: silent
  trigger:
    # trigger when leaving the office
    - platform: state
      entity_id: person.axel_larsson
      to: "not_home"
      from: "Work"
      for: "00:05:00"
  condition:
    # only on weekdays from 4pm onwards
    - condition: time
      after: "15:00:00"
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
  action:
    # run the script
    - service: script.hvac_prepare_return_from_away

# reload alexa media after HA startup
- id: ReloadAlexaMediaOnStartup
  alias: "Reload Alexa Media on Startup"
  description: Reload the Alexa Media Player integration on startup to work around bug
  mode: single
  trigger:
    - platform: homeassistant
      event: start
  action:
    - delay: 60
    - service: script.reload_alexa_media
